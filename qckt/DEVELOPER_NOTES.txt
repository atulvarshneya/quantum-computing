
##############################
### Gates arguments patterns:
###		single qubit gates:
###			H(1)					self.qbits = [1]
###			H([3,2,1])				self.qbits = [[3,2,1]] -- as a batch
###		fixed multi-qubits gates
###			SWAP(1,0)				self.qbits = [1,0]
###		variable multi-qubits gates
###			CX(3,2,1)				self.qbits = [3,2,1]
###			CX(4,3,2,1,0)			self.qbits = [4,3,2,1,0]
###		measure gate
###			M([3,2,1],[0,1,2])		self.qbits = [3,2,1]; selfcbits = [0,1,2]
###		zero-qubits gates
###			Probe(non_qubit_args)	self.qbits = []
###			Border()				self.qbits = []
###		custom gates
###			gate([1,2,3,4])			self.qbits = [1,2,3,4]
##############################



## aligned_op() and stretched_opmatrix() use two concepts core to
## the working of this simulator.
##
## methods __qbit_realign_list(), __rmat_invrmat(), and __shuffled_count() are used
## for the alignment of the operators as described below --
##
## Lets consider a 2-bit gate, e.g., CNOT gate, C, which, say, is defined
## to take bit 1 as the control bit, and bit 0 as the target bit --
##
##         +---+
## |b1> ---|-+-|------
##         | | |
## |b0> ---|-O-|------
##         +---+
##
## Lets see how we apply this 2-qubit gate to some specifc bits of a 4 qubit system,
## say, control qubit 1, and target qubit 3.
## We first 'stretch' this to the full 4 qubits U = np.kron(C, np.eye(4)). See below 
## the description of stretched_opmatrix().
##         +---+
## |b3> ---|-+-|------
##         | | |
## |b2> ---| o |------
##         |   |
## |b1> ---|---|------
##         |   |
## |b0> ---|---|------
##         +---+
##           U
## Note, U operator is a 2**nqbits x 2**nqbits matrix, 16x16 in this example case.
## And note, that this will apply the operation to the qubits 3 and 2, i.e., to 
## the most-significant qubits, and leave the other qubits unchanged.
## Remember, the operators act on a state vector to compute the resulting state 
## vector, that is why the operator is 2**nqbits x 2**nqbits in size
##
## Next, we apply an operator, r, a 2**nqbits x 2**nqbits matrix, on the state 
## to reorder (realign) it such that the state vector is ordered counting with qubit 1
## at qbit 3 position (MSB), and qubit 3 at qubit 2 position. 
## Next, apply U. Finally, apply an operator, rr, to undo the reordering done by 
## the operator r.
## So logically, the operators circuit diagram looks like -
##         +---+  +---+  +---+
## |b3> ---|3 1|--|-+-|--|1 3|----
##         |   |  | | |  |   |
## |b2> ---|2 3|--| o |--|3 2|----
##         |   |  |   |  |   |
## |b1> ---|1 2|--|---|--|2 1|----
##         |   |  |   |  |   |
## |b0> ---|0 0|--|---|--|0 0|----
##         +---+  +---+  +---+
##           r      U      rr
## 
## Now, if we multiple these three operators as a_op = (rr x U x r) then the resulting 
## operator, calling it a_op, basically is the one that applies C on qubits 1 and 3 as intended.

##
## Qubits |x> and |y>, each is acted upon by 2x2 operators U1 and U2, respectively.
## This is equivalent to the combined state of x and y, i.e., |xy> acted upon
## by a single 4x4 operator U = np.kron(U1, U2) (see Umesh Vazirani course
## on edx.org - Week 3: Quantum Circuits and Teleportation  
## Lecture 5: Quantum Gates  Video: Two Qubit Gates and Tensor Products
## https://www.youtube.com/watch?v=ISJYwzN-W20 )
##
##            +-------+
##            |       |
##            | +---+ |
##            | |   | |
## |x> -------+-|U1 |-+-------- U1|x>                  +-----+
##            | |2x2| |                                |     |
##            | +---+ |                                |     |
##            |       |                   |xy> --------+  U  +------- U|xy>
##            |       |                                |     |
##            | +---+ |                                | 4x4 |
##            | |   | |                                +-----+
## |y> -------+-|U1 |-+-------- U2|y>
##            | |2x2| |
##            | +---+ |
##            |       |
##            +-------+
