import qckt
import numpy as np

# Test 01
ck = qckt.QCkt(4)
ck.X(0)
ck.H(1)
ck.CX(1,2)
ck.draw()
bk = qckt.Backend()
bk.run(ck)
print("STATE VECTOR READ OUT")
print(bk.get_svec())
print("CREGISTER READ OUT")
print(bk.get_creg())

# Test 02
ck = qckt.QCkt(4)
ck.X(0)
ck.H(1)
ck.H(2)
ck.CCX(1,2,3)
ck.draw()
bk = qckt.Backend()
bk.run(ck)
print("STATE VECTOR READ OUT")
print(bk.get_svec())
print("CREGISTER READ OUT")
print(bk.get_creg())

# Test 03
ck = qckt.QCkt(4)
ck.X(0)
ck.X(1)
ck.X(2)
ck.X(0)
ck.Y(1)
ck.Z(2)
ck.M([2,1,0])
ck.draw()
bk = qckt.Backend()
bk.run(ck)
print("STATE VECTOR READ OUT")
print(bk.get_svec())
print("CREGISTER READ OUT")
print(bk.get_creg())

# Test 04
ck = qckt.QCkt(6)
ck.X(0)
ck.X(1)
ck.X(4)
ck.P(np.pi/4.0,0)
ck.CP(np.pi/4.0,1,4)
ck.CP(np.pi/4.0,2,5)
ck.draw()
bk = qckt.Backend()
bk.run(ck)
print("STATE VECTOR READ OUT")
print(bk.get_svec())
print("CREGISTER READ OUT")
print(bk.get_creg())

# Test 05
ck = qckt.QCkt(6)
ck.X(0)
ck.UROTk(3,0)
ck.SWAP(0,4)
ck.draw()
bk = qckt.Backend()
bk.run(ck)
print("STATE VECTOR READ OUT")
print(bk.get_svec())
print("CREGISTER READ OUT")
print(bk.get_creg())

# Test 06
ck = qckt.QCkt(6)
ck.X(0)
ck.X(2)
ck.X(4)
ck.Border()
ck.QFT([4,3,2,1,0])
ck.Border()
ck.draw()
bk = qckt.Backend()
bk.run(ck)
print("STATE VECTOR READ OUT")
print(bk.get_svec())
print("CREGISTER READ OUT")
print(bk.get_creg())
